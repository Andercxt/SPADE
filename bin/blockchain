#!/bin/bash
#
#  --------------------------------------------------------------------------------
#  SPADE - Support for Provenance Auditing in Distributed Environments.
#  Copyright (C) 2015 SRI International

#  This program is free software: you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.

#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#  --------------------------------------------------------------------------------
#
# Author: Hasanat Kazmi <hasanatkazmi@gmail.com>


print_help ()
{
	echo "$0 dumpblocks | createcsv <end block height> | createdb <path> | init <endblock> <path> | height <path> | downloadtools | clean | help"
	echo ""
	echo "'$0 init <path> |<end block height>|' : combines createcsv and createdb operations defined below. By default, <end block height> is maximun height bitcoind reports."
	echo "'$0 height <path>' : prints last block in Neo4j database saved at <path> "
	echo "'$0 download' : Download all blocks."
	echo "'$0 createcsv <end block height>' : Convert blocks into CSV representation."
	echo "'$0 createdb <end block height> <path>' : Convert CSV files into Neo4j database at <path>."
	echo "'$0 indexdb <path>' : Creates indexes for Neo4j database at <path>."
	echo "'$0 clean' : Delete cached blocks and CSV files."
	echo "'$0 help' : Prints this message"
}

JAVA_ARGS="-server -Xms8G -Xmx16G"
SPADE_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/../ && pwd )"
BITCOIN_STAGING_DIR=$SPADE_ROOT/tmp/bitcoin/

create_csv()
{
	mkdir -p $BITCOIN_STAGING_DIR/CSV/
	java -Djava.library.path="./lib/" -cp "./build:./lib/*" $JAVA_ARGS -XX:+UseConcMarkSweepGC spade.utility.BitcoinTools mode=createCSVes upto=$1	
}

create_db()
{
	java -Dfile.encoding=UTF-8  -Djava.library.path="./lib/" -cp "./build:./lib/*" org.neo4j.tooling.ImportTool  --into $2 --nodes $BITCOIN_STAGING_DIR/CSV/addresses_0_$1.csv --nodes $BITCOIN_STAGING_DIR/CSV/blocks_0_$1.csv --nodes $BITCOIN_STAGING_DIR/CSV/payments_0_$1.csv --nodes  $BITCOIN_STAGING_DIR/CSV/txes_0_$1.csv --relationships $BITCOIN_STAGING_DIR/CSV/edges_0_$1.csv
}

index_db()
{
	java -Djava.library.path="./lib/" -cp "./build:./lib/*" $JAVA_ARGS -XX:+UseConcMarkSweepGC spade.utility.BitcoinTools mode=createIndexes path=$1
}

pushd ${SPADE_ROOT} > /dev/null

if [ $# -eq 0 ] ; then
	print_help
else

	if [ $1 = "clean" ] ; then
		rm -rf $BITCOIN_STAGING_DIR/CSV/
		rm -rf $BITCOIN_STAGING_DIR/blockcache/
	elif [ $1 = "init" ] ; then
		if [ ! -d $2 ] ; then
			height=$3
			if [ -z $height ]; then
				height=`bitcoin-cli getblockcount`
				echo "Implicitly setting following block range in datastore: [0, $height]"
			fi
			echo "Step 1/3 - Creating CSV"
			echo "CSV creation started at: " `date`
			create_csv $height
			echo "CSV creation completed at: " `date`
			echo "Step 2/3 = Creating Neo4j database"
			echo "Neo4j database creation started at: " `date`
			create_db $height $2
			echo "Neo4j database creation completed at: " `date`
			echo $height > ${2%%/}/height.meta
			echo "Step 3/3 - Creating Indexes for databate"
			echo "Indexing started at: " `date`
			index_db $2
			echo "All set. Database and indexes creation completed at `date`!"
		else
			echo "Another file/directory is present at $3. Please delete or change path."
		fi
	elif [ $1 = "indexdb" ] ; then
		index_db $2
	elif [ $1 = "createdb" ] ; then
		create_db $2 $3
	elif [ $1 = "createcsv" ] ; then
		create_csv $2
	elif [ $1 = "download" ] ; then
		mkdir -p $BITCOIN_STAGING_DIR/CSV/blockcache/
		java -Djava.library.path="./lib/" -cp "./build:./lib/*" $JAVA_ARGS -XX:+UseConcMarkSweepGC spade.utility.BitcoinTools mode=downloadBlocksOnly
	elif [ $1 = "height" ] ; then
		if [ -a ${2%%/}/height.meta ] ; then
			cat ${2%%/}/height.meta
		else
			echo "Not height meta file found."
		fi
	else
		print_help
	fi

fi

popd > /dev/null
